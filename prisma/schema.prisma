generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model petsitters {
  sitterId    Int           @id @default(autoincrement())
  sitterName  String
  career      Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  region      String
  visit       String
  reservation reservation[]
  review      review[]
}

model reservation {
  postId          Int        @id @default(autoincrement())
  userId          Int
  sitterId        Int
  reservationDate DateTime
  petinfo         String     @db.Text
  request         String     @db.Text
  createdAt       DateTime   @default(now())
  updatedAt       DateTime
  petsitters      petsitters @relation(fields: [sitterId], references: [sitterId], onDelete: Cascade, map: "Reservation_sitterId_fkey")
  users           users      @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "Reservation_userId_fkey")

  @@index([sitterId], map: "Reservation_sitterId_fkey")
  @@index([userId], map: "Reservation_userId_fkey")
}

model review {
  postId     Int         @id @default(autoincrement())
  sitterId   Int
  userId     Int
  title      String
  content    String      @db.Text
  rate       review_rate
  createdAt  DateTime    @default(now())
  updatedAt  DateTime
  petsitters petsitters  @relation(fields: [sitterId], references: [sitterId], onDelete: Cascade, map: "Review_sitterId_fkey")
  users      users       @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "Review_userId_fkey")

  @@index([sitterId], map: "Review_sitterId_fkey")
  @@index([userId], map: "Review_userId_fkey")
}

model users {
  userId      Int           @id @default(autoincrement())
  name        String
  email       String        @unique(map: "Users_email_key")
  password    String?
  createdAt   DateTime      @default(now())
  reservation reservation[]
  review      review[]
}

enum review_rate {
  one
  two
  three
  four
  five
}
