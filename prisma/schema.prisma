// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model profile {
  profileId    Int      @id @default(autoincrement()) @map("profileId")
  userId       Int      @map("userId")
  newPwd       String?  @map("newPwd")
  birth        Int?     @map("birth")
  address      String?  @map("address")
  remarks      String?  @map("remarks")
  profileImage String?  @map("profileImage")
  createdAt    DateTime @default(now()) @map("createdAt")

  user users @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model petsitters {
  sitterId    Int           @id @default(autoincrement())
  sitterName  String
  career      Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  region      String
  visit       String
  reservation reservation[]
  review      review[]
}

model reservation {
  postId          Int        @id @default(autoincrement())
  userId          Int
  sitterId        Int
  reservationDate DateTime
  petinfo         String     @db.Text
  request         String     @db.Text
  createdAt       DateTime   @default(now())
  updatedAt       DateTime
  petsitters      petsitters @relation(fields: [sitterId], references: [sitterId], onDelete: Cascade, map: "Reservation_sitterId_fkey")
  users           users      @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "Reservation_userId_fkey")

  @@index([sitterId], map: "Reservation_sitterId_fkey")
  @@index([userId], map: "Reservation_userId_fkey")
}

model review {
  reviewId  Int         @id @default(autoincrement()) @map("reviewId")
  sitterId  Int         @map("sitterId")
  userId    Int         @map("userId")
  title     String      @map("title")
  content   String      @map("content") @db.Text
  rate      review_rate @map("rate")
  createdAt DateTime    @default(now()) @map("createdAt")
  updatedAt DateTime    @updatedAt @map("updatedAt")

  users     users      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  petsitter petsitters @relation(fields: [sitterId], references: [sitterId], onDelete: Cascade)
}

model users {
  userId      Int           @id @default(autoincrement())
  name        String
  email       String        @unique(map: "Users_email_key")
  password    String?
  createdAt   DateTime      @default(now())
  reservation reservation[]
  review      review[]
  profile     profile[]
}

enum review_rate {
  one
  two
  three
  four
  five
}
