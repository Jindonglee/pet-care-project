// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId        Int         @id @default(autoincrement())  @map("userId")     
  name          String      @map("name")  
  email         String      @unique @map("email")
  password      String?     @map("password")    
  createdAt     DateTime    @default(now()) @map("createdAt") 
  reservation   Reservation[]
  review        Review[]

  @@map("Users")
}

model Reservation{
  postId        Int          @id @default(autoincrement()) @map("postId")
  userId        Int          @map("userId")
  sitterId      Int          @map("sitterId")
  reservationDate DateTime   @map("reservationDate")
  petinfo       String       @db.Text @map("petinfo")
  request       String        @db.Text @map("request")
  createdAt     DateTime      @default(now()) @map("createdAt")
  updatedAt     DateTime      @updatedAt @map("updatedAt")

  user Users @relation (fields: [userId], references: [userId], onDelete: Cascade)
  petsitter PetSitters @relation (fields: [sitterId], references: [sitterId], onDelete: Cascade)
  @@map("Reservation")
}

model PetSitters {
  sitterId      Int         @id @default(autoincrement())  @map("sitterId")     
  sitterName    String      @map("sitterName")  
  career        Int         @map("career")    
  createdAt     DateTime    @default(now()) @map("createdAt")
  updatedAt     DateTime    @updatedAt @map("updatedAt") 
  reservation   Reservation[]
  review        Review[]

  @@map("PetSitters")
}

model Review {
  reviewId        Int          @id @default(autoincrement()) @map("reviewId")
  sitterId        Int          @map("sitterId")
  userId          Int          @map("userId")
  title         String       @map("title")
  content       String       @db.Text @map("content")
  rate          rate          @map("rate")
  createdAt     DateTime      @default(now()) @map("createdAt")
  updatedAt     DateTime      @updatedAt @map("updatedAt")

  users Users @relation (fields: [userId], references: [userId], onDelete: Cascade)
  petsitter PetSitters @relation (fields: [sitterId], references: [sitterId], onDelete: Cascade)

}
enum rate {
  one
  two
  three
  four
  five
  
}